#!/usr/bin/env ruby

require './lib/board'
require './lib/player'

# frozen_string_literal: true

def player_name
    puts "TIC TAC TOE game!!"

    print "First player name: "

    $player_1 = Player.new(gets.chomp.capitalize)

    print "Second player name: "

    $player_2 = Player.new(gets.chomp.capitalize)
end

def player_signs
     loop do
        puts "#{$player_1.name} choose your sign( X - O):"
        $player_1.sign = gets.chomp.upcase!
        $player_1.sign == "X" ? $player_2.sign = "O" : $player_2.sign = "X"
        break if $player_1.sign == "X" || $player_1.sign == "O"
        puts "Incorrect input!"
    end
end

def determine_winner
     case $winner
    when $player_1.sign
        puts "Congratulations! #{$player_1.name} wins! Want to play again? (Y or N)"
    when $player_2.sign
        puts "Congratulations! #{$player_2.name} wins! Want to play again? (Y or N)"
    else
        puts "It's a draw! Want to play again? (Y or N)"
    end
end

def new_game

    board_1 = Board.new
    
    player_signs

    puts "#{$player_1.name} sign's: #{$player_1.sign}"
    puts "#{$player_2.name} sign's: #{$player_2.sign}"

    $winner = "Draw"

    board_1.board_show
    loop do
        loop do
            puts "#{$player_1.name}, make a move choosing a number"
            $player_1.move = gets.chomp
            $player_1.move = $player_1.move.to_i - 1
            if (board_1.board_reader($player_1.move).is_a? Integer)
                board_1.board_update($player_1.sign, $player_1.move)
                break 
            else
                puts "Invalid move! Choose again!"
            end
        end
        board_1.board_show
        game_checker = game_finish?(board_1)
        break if game_checker
        loop do
            puts "#{$player_2.name}, make a move choosing a number"
            $player_2.move = gets.chomp
            $player_2.move = $player_2.move.to_i - 1
            if (board_1.board_reader($player_2.move).is_a? Integer)
                board_1.board_update($player_2.sign, $player_2.move)
                break 
            else
                puts "Position already taken! Choose again!"
            end
        end
        game_checker = game_finish?(board_1)
        board_1.board_show
        break if game_checker
    end

   determine_winner

end

def game_finish?(board)
    winning_combinations = [[board.board_reader(0), board.board_reader(1), board.board_reader(2)],
    [board.board_reader(3), board.board_reader(4), board.board_reader(5)],
    [board.board_reader(6), board.board_reader(7), board.board_reader(8)],
    [board.board_reader(0), board.board_reader(3), board.board_reader(6)],
    [board.board_reader(1), board.board_reader(4), board.board_reader(7)],
    [board.board_reader(2), board.board_reader(5), board.board_reader(8)],
    [board.board_reader(0), board.board_reader(4), board.board_reader(8)],
    [board.board_reader(2), board.board_reader(4), board.board_reader(6)]]
    result = false
    winning_combinations.each do |e|
        if e.all?('X') || e.all?('O')
            $winner = e[0]
            result = true
        elsif board.board.all?String
            result = true
        end
    end
    result
end

player_name
new_game

loop do
    replay = gets.chomp
    replay.upcase!
    case replay
    when 'Y'
        new_game
    when 'N'
        break
    else
        puts 'Invalid input, try Y or N!'
    end
end
